apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "valkey.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "valkey.labels" . | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations:
    {{- include "valkey.annotations" . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ include "valkey.fullname" . }}-headless
  selector:
    matchLabels:
      {{- include "valkey.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- include "valkey.annotations" . | nindent 8 }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "valkey.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
{{- with (include "valkey.imagePullSecrets" .) }}
{{ . | nindent 6 }}
{{- end }}
      securityContext: {{ include "common.renderPodSecurityContext" . | nindent 8 }}
      serviceAccountName: {{ include "valkey.serviceAccountName" . }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext: {{ include "common.renderContainerSecurityContext" . | nindent 12 }}
          image: {{ include "valkey.image" . }}
          imagePullPolicy: {{ .Values.image.imagePullPolicy }}
          command:
            - /bin/sh
            - -c
            - valkey-server /etc/valkey/valkey.conf --requirepass "${VALKEY_PASSWORD}"
          env:
            {{- if .Values.auth.enabled }}
            - name: VALKEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "valkey.secretName" . }}
                  key: {{ include "valkey.passwordKey" . }}
            {{- end }}
          ports:
            - name: valkey
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  {{- if .Values.auth.enabled }}
                  valkey-cli -a "${VALKEY_PASSWORD}" ping
                  {{- else }}
                  valkey-cli ping
                  {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  {{- if .Values.auth.enabled }}
                  valkey-cli -a "${VALKEY_PASSWORD}" ping
                  {{- else }}
                  valkey-cli ping
                  {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  {{- if .Values.auth.enabled }}
                  valkey-cli -a "${VALKEY_PASSWORD}" ping
                  {{- else }}
                  valkey-cli ping
                  {{- end }}
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: {{ include "valkey.dataDir" . }}
            - name: config
              mountPath: {{ include "valkey.configDir" . }}
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: config
          configMap:
            name: {{ include "valkey.configmapName" . }}
        - name: tmp
          emptyDir: {}
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- if .Values.persistence.annotations }}
        annotations:
          {{- toYaml .Values.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        {{- end }}
        {{- end }}
  {{- end }}
