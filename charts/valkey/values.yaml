## @section Global parameters
global:
  ## @param global.imageRegistry Global Docker Image registry
  imageRegistry: ""
  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  imagePullSecrets: []

## @section Common parameters
## @param nameOverride String to partially override valkey.fullname
nameOverride: ""
## @param fullnameOverride String to fully override valkey.fullname
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed objects
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
commonAnnotations: {}

## @section Valkey image configuration
image:
  ## @param image.registry Valkey image registry
  registry: docker.io
  ## @param image.repository Valkey image repository
  repository: valkey/valkey
  ## @param image.tag Valkey image tag (immutable tags are recommended)
  tag: "8.1.3-alpine3.22@sha256:d827e7f7552cdee40cc7482dbae9da020f42bc47669af6f71182a4ef76a22773"
  ## @param image.imagePullPolicy Valkey image pull policy
  imagePullPolicy: Always

## @section StatefulSet configuration
## @param replicaCount Number of Valkey replicas to deploy
replicaCount: 1

## @section Pod annotations and labels
## @param podAnnotations Map of annotations to add to the pods
podAnnotations: {}
## @param podLabels Map of labels to add to the pods
podLabels: {}

## @section Security Context
podSecurityContext:
  ## @param podSecurityContext.fsGroup Group ID for the volumes of the pod
  fsGroup: 1000

containerSecurityContext:
  ## @param containerSecurityContext.allowPrivilegeEscalation Enable container privilege escalation
  allowPrivilegeEscalation: false
  ## @param containerSecurityContext.runAsNonRoot Configure the container to run as a non-root user
  runAsNonRoot: true
  ## @param containerSecurityContext.runAsUser User ID for the Valkey container
  runAsUser: 999
  ## @param containerSecurityContext.runAsGroup Group ID for the Valkey container
  runAsGroup: 1000
  ## @param containerSecurityContext.readOnlyRootFilesystem Mount container root filesystem as read-only
  readOnlyRootFilesystem: true
  ## @param containerSecurityContext.capabilities.drop Linux capabilities to be dropped
  capabilities:
    drop:
      - ALL

## @section Valkey Authentication
auth:
  ## @param auth.enabled Enable password authentication
  enabled: true
  ## @param auth.password Valkey password
  password: ""
  ## @param auth.existingSecret The name of an existing secret with Valkey credentials
  existingSecret: ""
  ## @param auth.existingSecretPasswordKey Password key to be retrieved from existing secret
  existingSecretPasswordKey: "password"

## @section Valkey Configuration
config:
  ## @param config.maxMemory Maximum memory usage for Valkey (e.g., 256mb, 1gb)
  maxMemory: ""
  ## @param config.maxMemoryPolicy Memory eviction policy when maxmemory is reached
  maxMemoryPolicy: "allkeys-lru"
  ## @param config.save Valkey save configuration (e.g., "900 1 300 10 60 10000")
  save: "900 1 300 10 60 10000"
  ## @param config.extraConfig Additional Valkey configuration parameters
  extraConfig: []
  ## @param config.existingConfigmap Name of existing ConfigMap with Valkey configuration
  existingConfigmap: ""

## @section Service configuration
service:
  ## @param service.type Valkey service type
  type: ClusterIP
  ## @param service.port Valkey service port
  port: 6379
  ## @param service.targetPort Valkey container port
  targetPort: 6379
  ## @param service.annotations Service annotations
  annotations: {}

## @section Service Account configuration
## @param serviceAccount.create Enable creation of a Service Account
serviceAccount:
  create: false
  ## @param serviceAccount.name Name of the Service Account
  name: ""
  ## @param serviceAccount.annotations Annotations to add to the Service Account
  annotations: {}
  ## @param serviceAccount.automountToken Enable automounting of the Service Account token
  automountToken: false

## @section Ingress configuration
ingress:
  ## @param ingress.enabled Enable ingress record generation for Valkey
  enabled: false
  ## @param ingress.className IngressClass that will be used to implement the Ingress
  className: ""
  ## @param ingress.annotations Additional annotations for the Ingress resource
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  ## @param ingress.hosts[0].host Hostname for Valkey ingress
  ## @param ingress.hosts[0].paths[0].path Path for Valkey ingress
  ## @param ingress.hosts[0].paths[0].pathType Path type for Valkey ingress
  hosts:
    - host: valkey.local
      paths:
        - path: /
          pathType: Prefix
  ## @param ingress.tls TLS configuration for Valkey ingress
  tls: []
  #  - secretName: valkey-tls
  #    hosts:
  #      - valkey.local

## @section Resources
resources:
  limits:
    memory: 64Mi
  requests:
    cpu: 10m
    memory: 64Mi

## @section Persistence
persistence:
  ## @param persistence.enabled Enable persistence using Persistent Volume Claims
  enabled: true
  ## @param persistence.storageClass Persistent Volume storage class
  storageClass: ""
  ## @param persistence.annotations Persistent Volume Claim annotations
  annotations: {}
  ## @param persistence.size Persistent Volume size
  size: 8Gi
  ## @param persistence.accessModes Persistent Volume access modes
  accessModes:
    - ReadWriteOnce

## @section Liveness and readiness probes
livenessProbe:
  ## @param livenessProbe.enabled Enable livenessProbe on Valkey containers
  enabled: true
  ## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
  initialDelaySeconds: 20
  ## @param livenessProbe.periodSeconds Period seconds for livenessProbe
  periodSeconds: 10
  ## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
  timeoutSeconds: 5
  ## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
  failureThreshold: 3
  ## @param livenessProbe.successThreshold Success threshold for livenessProbe
  successThreshold: 1

readinessProbe:
  ## @param readinessProbe.enabled Enable readinessProbe on Valkey containers
  enabled: true
  ## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
  initialDelaySeconds: 5
  ## @param readinessProbe.periodSeconds Period seconds for readinessProbe
  periodSeconds: 5
  ## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
  timeoutSeconds: 1
  ## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
  failureThreshold: 3
  ## @param readinessProbe.successThreshold Success threshold for readinessProbe
  successThreshold: 1

startupProbe:
  ## @param startupProbe.enabled Enable startupProbe on Valkey containers
  enabled: false
  ## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
  initialDelaySeconds: 20
  ## @param startupProbe.periodSeconds Period seconds for startupProbe
  periodSeconds: 5
  ## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
  timeoutSeconds: 1
  ## @param startupProbe.failureThreshold Failure threshold for startupProbe
  failureThreshold: 30
  ## @param startupProbe.successThreshold Success threshold for startupProbe
  successThreshold: 1

## @section Node Selection
## @param nodeSelector Node labels for pod assignment
nodeSelector: {}

## @param tolerations Toleration labels for pod assignment
tolerations: []

## @param affinity Affinity settings for pod assignment
affinity: {}

## @param extraObjects Array of extra objects to deploy with the release
extraObjects: []
# - apiVersion: v1
#   kind: ConfigMap
#   metadata:
#     name: extra-config
#     namespace: "{{ .Release.Namespace }}"
#   data:
#     key: value
